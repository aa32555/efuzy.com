{
    "data": [
        "Chapter 7. Functions",
        "$ASCII()",
        "Returns the integer ASCII code for a character in the given string.",
        " For a mumps process started in UTF-8 mode, $ASCII() returns",
        "The format for the $ASCII function is:",
        "$A[SCII](expr[,intexpr])",
        "Examples of $ASCII()",
        "GTM>For i=0:1:3 Write !,$Ascii(\"Hi\",i)",
        "-1",
        "72",
        "73",
        "-1",
        "GTM>",
        "This loop displays the result of $ASCII() specifying a character position before",
        " first and second positions, and after the string.",
        "Example:",
        "GTM>Write $ZCHSET",
        "UTF-8",
        "Functions",
        "215",
        "GTM>Write $Ascii(\"主\")",
        "20027",
        "GTM>Write $$FUNC^%DH(\"20027\")",
        "00004E3B",
        "In this example, 20027 is the integer equivalent of the hexadecimal",
        " value 4E3B. U+4E3B is a character in the CJK Ideograph",
        "block of the Unicode® standard.",
        "$Char()",
        "Returns a string of one or more characters corresponding",
        " to integer ASCII codes specified in its argument(s). For a process",
        "started in UTF-8 mode, $CHAR() returns a string composed of characters",
        "represented by the integer equivalents of the",
        "Unicode® code-points specified in its argument(s).",
        "The format for the $CHAR function is:",
        "$C[HAR](intexpr[,...])",
        "• The integer expression(s) specify the codes of the character(s)",
        "$CHAR() returns.",
        "• The M standard does not restrict the number of arguments to $CHAR().",
        "However, GT.M does limit the number of arguments",
        "to a maximum of 254. $CHAR() provides a means of producing non-graphic",
        "characters, as such characters cannot appear",
        "directly within an M string literal. When used with $ASCII(), $CHAR()",
        "can also perform arithmetic operations on the codes",
        "associated with characters.",
        "• With VIEW \"BADCHAR\" enabled, $CHAR() produces a ",
        "run-time error if any expression evaluates to a code-point value that",
        "is not a UTF-8 character. GT.M determines from ICU which characters are illegal.",
        "• $ZCHAR() is the parallel function of $CHAR(). $ZCHAR() returns a sequence of bytes (rather than a sequence of characters)",
        "and can perform all byte-oriented $CHAR() operations. For more information, refer to “$ZCHar()” (page 257).",
        "Examples of $CHAR()",
        "Example:",
        "GTM>write $char(77,85,77,80,83,7)",
        "MUMPS",
        "GTM>",
        "This example uses $CHAR() to WRITE the word MUMPS and signal the terminal bell.",
        "Example:",
        "set nam=$extract(nam,1,$length(nam)-1)_$char($ascii(nam,$length(nam))-1)",
        "This example uses $CHAR() and $ASCII() to set the variable nam to a value that immediately precedes its previous value in the",
        "set of strings of the same length as nam.",
        "Example:",
        "GTM>write $zchset",
        "UTF-8",
        "GTM>write $char(20027)",
        "主",
        "Functions",
        "216",
        "GTM>write $char(65)",
        "A",
        "In the above example, the integer value 20027 is the Unicode® character \"主\" in the CJK Ideograph block. Note that the output",
        "of the $CHAR() function for values of integer expression(s) from 0 through 127 does not vary with choice of the character",
        "encoding scheme. This is because 7-bit ASCII is a proper subset of UTF-8 character encoding scheme. The representation of",
        "characters returned by the $CHAR() function for values 128 through 255 differ for each character encoding scheme.",
        "$Data()",
        "Returns an integer code describing the value and descendent status of a local or global variable.",
        "The format for the $DATA function is:",
        "$D[ATA](glvn)",
        "• The subscripted or unsubscripted global or local variable name specifies the target node.",
        "• If the variable is undefined, $DATA() returns 0.",
        "• If the variable has a value but no descendants, $DATA() returns 1.",
        "• If the variable has descendants but no value, $DATA() returns 10.",
        "• If the variable has a value and descendants, $DATA() returns 11.",
        "• $ZDATA() extends $DATA() to reflects the current alias state of the lvn or name argument to identify alias and alias",
        "container variables. For more information, refer to “$ZDATA()” (page 260).",
        "The following table summarizes $DATA() return values.",
        "$DATA() Results",
        "VALUE",
        "DESCENDANTS (NO) DESCENDANTS (YES)",
        "NO 0 10",
        "YES 1 11",
        "$DATA() return values can also be understood as a pair of truth-values where the left describes descendants and the right",
        "describes data 1 and where M suppresses any leading zero (representing no descendants).",
        "Examples of $DATA()",
        "Example:",
        "GTM>Kill Write $Data(a)",
        "0",
        "GTM>Set a(1)=1 Write $Data(a(1))",
        "1",
        "GTM>Write $Data(a)",
        "Functions",
        "217",
        "10",
        "GTM>Set a=0 Write $Data(a)",
        "11",
        "GTM>",
        "This uses $DATA to display all possible $DATA() results.",
        "Example:",
        "lock ^ACCT(0)",
        "if '$data(^ACCT(0)) set ^ACCT(0)=0",
        "set (ACCT,^ACCT(0))=^ACCT(0)+1",
        "lock",
        "This ses $DATA() to determine whether a global node requires initialization.",
        "Example:",
        "for set cus=$O(^cus(cus)) quit:cus=\"\" if $data(^(cus))>1 do WORK",
        "This uses $DATA() to determine whether a global node has descendants and requires additional processing.",
        "$Extract()",
        "Returns a substring of a given string.",
        "The format for the $EXTRACT function is:",
        "$E[XTRACT](expr[,intexpr1[,intexpr2]])",
        "• The expression specifies a string from which $EXTRACT() derives a substring.",
        "• The first optional integer expression (second argument) specifies the starting character position in the string. If the starting",
        "position is beyond the end of the expression, $EXTRACT() returns an empty string. If the starting position is zero (0) or",
        "negative, $EXTRACT() starts at the first character; if this argument is omitted, $EXTRACT() returns the first character of the",
        "expression. $EXTRACT() numbers character positions starting at one (1) (that is, the first character of a string is at position",
        "one (1)).",
        "• The second optional integer expression (third argument) specifies the ending character position for the result. If the ending",
        "position is beyond the end of the expression, $EXTRACT() stops with the last character of the expression. If the ending",
        "position precedes the starting position, $EXTRACT() returns an empty string. If this argument is omitted, $EXTRACT()",
        "returns one character at most.",
        "$EXTRACT() provides a tool for manipulating strings based on character positions.",
        "For a mumps process started in UTF-mode, $EXTRACT interprets the string arguments as UTF-8 encoded. With VIEW",
        "\"BADCHAR\" enabled, $EXTRACT() produces a run-time error when it encounters a character in the reserved range of the",
        "Unicode® standard, but it does not process the characters that fall after the span specified by the arguments. The parallel",
        "function of $EXTRACT() is $ZEXTRACT(). Use $ZEXTRACT() for byte-oriented operations. For more information, refer to",
        "“$ZExtract()” (page 264).",
        "$EXTRACT() can be used on the left-hand side of the equal sign (=) of a SET command to set a substring of a string. This",
        "construct permits easy maintenance of individual pieces within a string. It can also be used to right justify a value padded with",
        "blank characters. For more information on SET $EXTRACT(), refer to “Set” (page 143) in the Commands chapter.",
        "Functions",
        "218",
        "Examples of $EXTRACT()",
        "Example:",
        "GTM>for i=0:1:3 write !,$extract(\"HI\",i),\"<\"",
        "<",
        "H<",
        "I<",
        "<",
        "GTM>",
        "This loop displays the result of $EXTRACT(), specifying no ending character position and a beginning character position",
        "\"before\" first and second positions, and \"after\" the string.",
        "Example:",
        "GTM>For i=0:1:3 write !,$extract(\"HI\",1,i),\"<\"",
        "<",
        "H<",
        "HI<",
        "HI<",
        "GTM>",
        "This loop displays the result of $EXTRACT() specifying a beginning character position of 1 and an ending character position",
        "\"before, \" first and second positions, and \"after\" the string.",
        "Example:",
        "GTM>zprint ^trim",
        "trim(x)",
        "new i,j",
        "for i=1:1:$length(x) quit:\" \"\\'=$extract(x,i)",
        "for j=$length(x):-1:1 quit:\" \"\\'=$extract(x,j)",
        "quit $extract(x,i,j)",
        "GTM>set str=\" MUMPS \"",
        "GTM>write $length(str)",
        "7",
        "GTM>write $length($$^trim(str))",
        "5",
        "GTM>",
        "This extrinsic function uses $EXTRACT() to remove extra leading and trailing spaces from its argument.",
        "$Find()",
        "Returns an integer character position that locates the occurrence of a substring within a string.",
        "The format for the $FIND function is:",
        "$F[IND](expr1,expr2[,intexpr])",
        "• The first expression specifies the string within which $FIND() searches for the substring.",
        "• The second expression specifies the substring for which $FIND() searches.",
        "Functions",
        "219",
        "• The optional integer expression identifies the starting position for the $FIND() search. If this argument is missing, zero (0), or",
        "negative, $FIND() begins its search in the first position of the string.",
        "• If $FIND() locates the substring, it returns the position after the last character of the substring. If the end of the substring",
        "coincides with the end of the string (expr1), it returns an integer equal to the length of the string plus one ($L(expr1)+1).",
        "• If $FIND() does not locate the substring, it returns zero (0).",
        "• For a process started in UTF-8 mode, $FIND() interprets the string arguments as UTF-8 encoded. With VIEW \"BADCHAR\"",
        "enabled, $FIND() produces a run-time error when it encounters a malformed character, but it does not process the characters",
        "that fall after the span specified by the arguments.",
        "• $ZFIND() is the Z equivalent function $FIND(). Irrespective of the settings of VIEW \"BADCHAR\" and $ZCHSET, $ZFIND()",
        "interprets argument as a sequence of bytes (rather than a sequence of characters) and can perform byte-oriented $FIND()",
        "operations.For more information, refer to “$ZFind()” (page 265).",
        "$FIND() provides a tool to locate substrings. The ([) operator and the two-argument $LENGTH() are other tools that provide",
        "related functionality.",
        "Examples of $FIND()",
        "Example:",
        "GTM>write $find(\"HIFI\",\"I\")",
        "3",
        "GTM>",
        "This example uses $FIND() to WRITE the position of the first occurrence of the character \"I.\" The return of 3 gives the position",
        "after the \"found\" substring.",
        "Example:",
        "GTM>write $find(\"HIFI\",\"I\",3)",
        "5",
        "GTM>",
        "This example uses $FIND() to WRITE the position of the next occurrence of the character \"I\" starting in character position",
        "three.",
        "Example:",
        "GTM>set t=1 for set t=$find(\"BANANA\",\"AN\",t) quit:\\'t write !,t",
        "4",
        "6",
        "GTM>",
        "This example uses a loop with $FIND() to locate all occurrences of \"AN\" in \"BANANA\". $FIND() returns 4 and 6 giving the",
        "positions after the two occurrences of \"AN\".",
        "Example:",
        "GTM>set str=\"MUMPS databases are hierarchical\"",
        "GTM>Write $find(str,\" \")",
        "7",
        "GTM>Write $find(str,\"Z\")",
        "0",
        "Functions",
        "220",
        "GTM>Write $find(str,\"d\",1)",
        "8",
        "GTM>Write $find(str,\"d\",10)",
        "0",
        "The above example searches a string for a sub string, and returns an integer value which corresponds to the next character",
        "position after locating the sub string.",
        "$FNumber()",
        "Returns a string containing a formatted number.",
        "The format for the $FNUMBER function is:",
        "$FN[UMBER](numexpr,expr[,intexpr])",
        "• The numeric expression specifies the number that $FNUMBER() formats.",
        "• The expression (second argument) specifies zero or more single character format control codes; if the expression contains",
        "any character other than the defined codes, $FNUMBER() generates a run-time error.",
        "• The optional integer expression (third argument) specifies the number of digits after the decimal point. If the numeric",
        "expression has more digits than specified by this argument, $FNUMBER() rounds to obtain the result. If the numeric",
        "expression has fewer digits than specified by this argument, $FNUMBER() zero-fills to obtain the result.",
        "• When the optional third argument is specified and the first argument evaluates to a fraction between -1 and 1, $FNUMBER()",
        "returns a number with a leading zero (0) before the decimal point (.).",
        "$FNUMBER() formats or edits numbers, usually for reporting. For more information on rounding performed by $FNUMBER(),",
        "refer to “$Justify()” (page 223).",
        "The formatting codes are:",
        "• + : Forces a \"+\" on positive values.",
        "• - : Suppresses the \"-\" on negative values.",
        "• , : Inserts commas every third position to the left of the decimal within the number.",
        "• T : Represents the number with a trailing, rather than a leading sign; positive numbers have a trailing space unless the",
        "expression includes a plus sign (+).",
        "• P : Represents negative values in parentheses, positive values with a space on either side; combining with any other code",
        "except comma (,) causes a run-time error.",
        "Examples of $FNUMBER()",
        "Example:",
        "GTM>do ^fnum",
        "fnum;",
        "zprint ^fnum",
        "set X=-100000,Y=2000",
        "write \"SUPPRESS NEGATIVE SIGN:\",?35,$FNumber(X,\"-\"),!",
        "Functions",
        "221",
        "write \"TRAILING SIGN:\",?35,$FNumber(X,\"T\"),!",
        "write \"NEGATIVE NUMBERS IN ():\",?35,$FNumber(X,\"P\"),!",
        "write \"COMMAS IN NUMBER:\",?35,$FNumber(X,\",\"),!",
        "write \"NUMBER WITH FRACTION:\",?35,$FNumber(X,\"\",2),!",
        "write \"FORCE + SIGN IF POSITIVE:\",?35,$FNumber(Y,\"+\"),!",
        "SUPPRESS NEGATIVE SIGN: 100000",
        "TRAILING SIGN: 100000-",
        "NEGATIVE NUMBERS IN (): (100000)",
        "COMMAS IN NUMBER: -100,000",
        "NUMBER WITH FRACTION: -100000.00",
        "FORCE + SIGN IF POSITIVE: +2000",
        "Example:",
        "set x=$fnumber(x,\"-\")",
        "This example uses $FNUMBER() to SET x equal to its absolute value.",
        "$Get()",
        "Returns the value of a local or global variable if the variable has a value. If the variable has no value, the function returns a",
        "value specified by an optional second argument, and otherwise returns an empty string.",
        "The format for the $GET function is:",
        "$G[ET](glvn[,expr])",
        "• The subscripted or unsubscripted global or local variable name specifies the node for which $GET() returns a value.",
        "• If the global or local variable has a data value, $GET() returns the value of the variable.",
        "• If the global or local variable has no data value, $GET() returns the value of the optional expression (second argument), or an",
        "empty string if the expression is not specified.",
        "M defines $GET(x,y) as equivalent to:",
        "$Select($Data(x)[0:y,1:x)",
        "and $GET(x) as equivalent to:",
        "$GET(x,\"\")",
        "$GET() provides a tool to eliminate separate initialization of variables. This technique may provide performance benefits",
        "when used to increase the density of a sparse global array by eliminating nodes that would otherwise hold absent optional",
        "information. On the other hand, some uses of one argument $GET() can mask logic problems.",
        "GT.M has a \"NOUNDEF\" mode of operation, which treats all variable references as if they were arguments to a one argument",
        "$GET(). The VIEW command controls \"NOUNDEF\" mode.",
        "Examples of $GET()",
        "Example:",
        "setstatus;",
        "if \\'$data(^PNT(NAME,TSTR)) set STATUS=\"NEW TEST\"",
        "Functions",
        "222",
        "else if ^PNT(NAME,TSTR)=\"\" set STATUS=\"WAITING FOR RESULT\"",
        "else set STATUS=^PNT(NAME,TSTR)",
        "This example can be reduced to two lines of code by using $GET(),",
        "shown in the following example. However, by using $GET()",
        "in its one-argument form, the distinction between an undefined",
        "variable and one with a null value is lost:",
        "set STATUS=$get(^PNT(NAME,TSTR))",
        "if STATUS=\"\" set STATUS=\"WAITING FOR RESULT\"",
        "This is solved by using the two-argument form of $GET():",
        "set STATUS=$get(^PNT(NAME,TSTR),\"NEW TEST\")",
        "if STATUS=\"\" set STATUS=\"WAITING FOR RESULT\"",
        "$Increment()",
        "Atomically adds (increments) a global variable by",
        "a numeric value. Note that increment is atomic, but",
        "the evaluation of the",
        "expression is not, unless inside a transaction (TStart/TCommit).",
        "The function also works on local variables, but has less benefit",
        "for locals as it does not (need to) provide ACID behavior.",
        "The format of the $INCREMENT function is:",
        "$INCREMENT(glvn[,numexpr])",
        "• $I, $INCR, $INCREMENT, $ZINCR, and $ZINCREMENT are considered as",
        "valid synonyms of the full function name.",
        "• $INCREMENT() returns the value of the glvn after the increment.",
        "• If not specified, numexpr defaults to 1. Otherwise, $INCREMENT() ",
        "evaluates the \"numexpr\" argument before the \"glvn\"",
        "argument.",
        "• numexpr can be a negative value.",
        "• Since it performs an arithmetic operation, $INCREMENT() treats",
        "glvn as numeric value. $INCREMENT treats glvn as if it",
        "were the first argument of an implicit $GET() before the increment.",
        "If the value of glvn is undefined $INCREMENT treats",
        "it as having empty string , which means it treats it as",
        "a numeric zero (0) (even if glvn is a global variable that resides on a",
        "remote node and is accessed through a GT.CM GNP server).",
        "• If $INCREMENT() occurs inside a transaction",
        "($TLevel is non-zero), or if glvn refers to a",
        "local variable, it is equivalent to SET glvn=$GET(glvn)+numexpr.",
        "• If $INCREMENT() occurs outside a transaction ($TLevel is zero) and",
        "glvn refers to a global variable, the function acts as",
        "a SET glvn=$GET(glvn)+numexpr performed as an Atomic,",
        "Consistent and Isolated operation. Note that $INCREMENT()",
        "performs the evaluation of numexpr before it starts",
        "the Atomic, Consistent, Isolated incrementing of the glvn.",
        "If the region containing the glvn is journaled,",
        "then the $INCREMENT() is also Durable.",
        "Only BG, MM (OpenVMS only) and GT.CM GNP",
        "access methods are supported for the region",
        "containing the global variable (glvn).",
        "GT.CM OMI and GT.CM DDP access",
        "methods do not support this operation",
        "and there are no current plans to add such support.",
        "• $INCREMENT() does not support global variables",
        "that have NOISOLATION turned ON",
        "(through the VIEW \"NOISOLATION\"",
        "command),",
        "and a $INCREMENT() on such a variable,",
        "triggers a GVINCRISOLATION run-time error.",
        "• The naked reference is affected by",
        "the usage of global variables",
        "(with or without indirection) in the glvn",
        "and\/or numexpr components. The evaluation of",
        " \"numexpr\" ahead of \"glvn\",",
        "determines the value of the naked reference after the",
        "$INCREMENT. If neither glvn or numexpr contain indirection,",
        "then $INCREMENT sets the naked reference as follows:",
        "Functions",
        "223",
        "• glvn, if glvn is a global, or",
        "• the last global reference in",
        "\"\"numexpr\" if glvn is a local, or",
        "• unaffected if neither glvn nor",
        "numexpr has any global reference.",
        "Examples of $INCREMENT()",
        "Example:",
        "GTM>set i=1'",
        "GTM>write $increment(i)",
        "2",
        "GTM>write $increment(i)",
        "3",
        "GTM>write $increment(i)",
        "4",
        "GTM>write $increment(i)",
        "5",
        "GTM>write i",
        "5",
        "GTM>write $increment(i,-2)",
        "3",
        "GTM>write i",
        "3",
        "GTM>",
        "This example increments the value of",
        "i by 1 and at the end decrements it by 2.",
        "Note that the default value for incrementing a",
        "variable is 1.",
        "$Justify()",
        "Returns a formatted string.",
        "The format for the $JUSTIFY function is:",
        "$J[USTIFY](expr,intexpr1[,intexpr2])",
        "• The expression specifies the string to be",
        "formatted by $JUSTIFY().",
        "• The first integer expression (second argument)",
        "specifies the minimum size of the resulting string.",
        "If the first integer",
        "expression is larger than the length of the expression,",
        "$JUSTIFY() right justifies the expression",
        "to a string of the specified",
        "length by adding leading spaces. Otherwise, $JUSTIFY()",
        "returns the expression unmodified unless specified by",
        "the second integer argument.",
        "• The optional second integer expression (third argument)",
        "specifies the number of digits to follow the decimal",
        "point in the",
        "result, and forces $JUSTIFY() to evaluate the expression",
        "as numeric. If the numeric expression has more digits than",
        "this argument specifies, $JUSTIFY() rounds to obtain",
        "the result. If the expression had fewer digits than",
        "this argument specifies,",
        "$JUSTIFY() zero-fills to obtain the result.",
        "• When the second argument is specified and",
        "the first argument evaluates to a fraction",
        "between -1 and 1, $JUSTIFY() returns a",
        "number with a leading zero (0)",
        "before the decimal point (.).",
        "Functions",
        "224",
        "$JUSTIFY() fills expressions to create",
        "fixed length values. However, if the length",
        "of the specified expression exceeds the",
        "specified field size,",
        "$JUSTIFY() does not truncate the result",
        "(although it may still round based",
        "on the third argument). When",
        "required, use $EXTRACT() to perform truncation.",
        "$JUSTIFY() optionally rounds the portion of the",
        "result after the decimal point. In the absence",
        "of the third argument, $JUSTIFY()",
        "does not restrict the evaluation of the expression.",
        "In the presence of the third (rounding) argument,",
        "$JUSTIFY() evaluates the",
        "expression as a numeric value. The rounding algorithm",
        "can be understood as follows:",
        "• If necessary, the rounding algorithm extends",
        "the expression to the right with 0s (zeros)",
        "to have at least one more digit than",
        "specified by the rounding argument.",
        "• Then, it adds 5 (five) to the digit position",
        "after the digit specified by the rounding argument.",
        "• Finally, it truncates the result to",
        "the specified number of digits.",
        "The algorithm rounds up when",
        "excess digits specify a half or",
        "more of the last retained digit and",
        "rounds down when they specify",
        "less than a half.",
        "• For a process started in UTF-8 mode,",
        "$JUSTIFY() interprets the string argument",
        "as UTF-8 encoded. With VIEW \"BADCHAR\"",
        "enabled, $JUSTIFY() produces",
        "a run-time error when it encounters",
        "a malformed character.",
        "• $ZJUSTIFY() is the parallel",
        "function of $JUSTIFY().",
        "Irrespective of the settings of",
        "VIEW \"BADCHAR\" and $ZCHSET,",
        "$ZJUSTIFY() interprets argument",
        "as a sequence of bytes",
        "(rather than a sequence of characters)",
        "and can perform all",
        "byteo-riented $JUSTIFY() operations.",
        "For more information,",
        "refer to $ZJustify()(page 268)",
        "Examples of $JUSTIFY()",
        "Example:",
        "GTM>write \":\",$justify(\"HELLO\",10),\":\",!,\":\",$justify(\"GOODBYE\",5),\":\"",
        ": HELLO:",
        ":GOODBYE:",
        "GTM>",
        "This uses $JUSTIFY() to display \"HELLO\"",
        "in a field of 10 spaces and \"GOODBYE\"",
        "in a field of 5 spaces. Because the length of",
        "\"GOODBYE\" exceeds five spaces,",
        "the result overflows the specification.",
        "Example:",
        "GTM>write \"1234567890\",!,$justify(10.545,10,2)",
        "1234567890",
        "10.55",
        "GTM>",
        "This uses $JUSTIFY() to WRITE a rounded",
        "value right justified in a field of 10",
        "spaces. Notice that the result",
        "has been rounded up.",
        "Example:",
        "GTM>write \"1234567890\",!,$justify(10.544,10,2)",
        "1234567890",
        "10.54",
        "GTM>",
        "Again, this uses $JUSTIFY() to WRITE a",
        "rounded value right justified in a field",
        "of 10 spaces. Notice that the result",
        "has been rounded down.",
        "Functions",
        "225",
        "Example:",
        "GTM>write \"1234567890\",!,$justify(10.5,10,2)",
        "1234567890",
        "10.50",
        "GTM>",
        "Once again, this uses $JUSTIFY() to",
        "WRITE a rounded value right justified",
        "in a field of 10 spaces. Notice that",
        "the result has been zero-filled to 2 places.",
        "Example:",
        "GTM>write $justify(.34,0,2)",
        "0.34",
        "GTM>",
        "This example uses $JUSTIFY to ensure that the fraction",
        "has a leading zero. Note the use of a second argument",
        "of zero in the case that rounding is the only function",
        "that $JUSTIFY is to perform.",
        "$Length()",
        "Returns the length of a string measured in characters,",
        "or in \"pieces\" separated by a delimiter specified by",
        "one of its arguments.",
        "The format for the $LENGTH function is:",
        "$L[ENGTH](expr1[,expr2])",
        "• The first expression specifies the string",
        "that $LENGTH() \"measures\".",
        "• The optional second expression specifies the",
        "delimiter that defines the measure;",
        "if this argument is missing, $LENGTH()",
        "returns the number of characters in the string.",
        "• If the second argument is present and not an empty",
        "string, $LENGTH returns one more than the count",
        "of the number of occurrences of the second string",
        "in the first string; if the second argument is an",
        "empty string, the M standard specifies that",
        "$LENGTH() returns a zero (0).",
        "• $LENGTH() provides a tool for determining",
        "the lengths of strings in two ways, characters",
        "and pieces. The two argument $LENGTH() returns",
        "the number of existing pieces, while the one",
        "argument returns the number of characters.",
        "• For a process started in UTF-8 mode, $LENGTH()",
        "interprets the string argument(s) as UTF-8 encoded.",
        "With VIEW \"BADCHAR\" enabled, $LENGTH() produces a",
        "run-time error when it encounters a malformed character.",
        "• $ZLENGTH() is the parallel function of $LENGTH().",
        "Irrespective of the setting of VIEW \"BADCHAR\" and $ZCHSET,",
        "$ZLENGTH() interpets string arguments as a sequence of bytes",
        "(rather than characters) and can perform all byte-oriented",
        "$LENGTH() operations. For more information refer to",
        "$ZLength() (page 269)",
        "Examples of $LENGTH()",
        "Example:",
        "GTM>Write $length(\"KINGSTON\")",
        "8",
        "GTM>",
        "Functions",
        "226",
        "This uses $LENGTH() to WRITE the length in characters",
        "of the string \"KINGSTON\".",
        "Example:",
        "GTM>set x=\"Smith\/John\/M\/124 Main Street\/Ourtown\/KA\/USA\"",
        "GTM>write $length(x,\"\/\")",
        "7",
        "GTM>",
        "This uses $LENGTH() to WRITE the number of",
        "pieces in a string, as delimited by \/.",
        "Example:",
        "GTM>write $length(\"\/2\/3\/\",\"\/\")",
        "4",
        "GTM>",
        "This also uses $LENGTH() to WRITE the number",
        "of pieces in a string, as delimited by \/.",
        "Notice that GT.M. adds one count to the count of delimiters",
        "(in this case 3), to get the number of pieces in the",
        "string (displays 4).",
        "$NAme()",
        "Returns an evaluated representation of some or all of",
        "a local or global variable name. The format for the",
        "$NAME function is: $NA[ME](glvn[,intexpr])",
        "• The subscripted or unsubscripted global or local variable",
        "name, including naked references, specifies the name for which",
        "$NAME() returns an evaluated representation.",
        "• When using NOUNDEF, $NAME() returns an empty string where",
        "appropriate for undefined variables.",
        "• The optional integer expression (second argument) specifies",
        "the maximum number of subscript levels in the representation.",
        "If the integer expression is not provided or exceeds the",
        "actual number of subscript levels, $NAME() returns a representation",
        "of the whole name. If the integer expression is zero (0),",
        "$NAME() returns only the name. A negative integer expression",
        "produces a run-time error.",
        "Examples of $NAME()",
        "Example:",
        "GTM>set X=\"A\"\"B\",^Y(1,X,\"B\",4)=\"\"",
        "GTM>write $name(^(3),3)",
        "^Y(1,\"A\"\"B\",\"B\")",
        "GTM>",
        "This example sets up a naked reference and then uses $NAME()",
        "to display the first three levels of that four-level reference.",
        "Example:",
        "GTM>write $name(^(3),0)",
        "^Y",
        "Functions",
        "227",
        "GTM>",
        "This example shows the name level for the same naked reference.",
        "$Next()",
        "Returns the next subscripted local or global variable name in",
        "collation sequence within the array level specified by its' argument.",
        "$NEXT() has been replaced by $ORDER().$NEXT has been retained in the",
        "current standard only for compatibility with earlier versions of the",
        "standard. $NEXT() is similar to $ORDER(). However, $NEXT() has the",
        "deficiency that when it encounters negative one (-1) as a subscript,",
        "it returns the same result as when it finds no other data at the level.",
        "This deficiency is particularly disruptive because it occurs in the",
        "middle of the M collating sequence. Caution As $NEXT() has been",
        "removed from the standard in the MDC, you should use $ORDER.",
        "The format for the $NEXT function is:",
        "$N[EXT](glvn)",
        "• The subscripted global or local variable name specifies",
        "the node following which $NEXT() searches for the next node with",
        "data and/or descendants; the number of subscripts contained in",
        "the argument implicitly defines the array level.",
        "• If $NEXT() finds no node at the specified level after the",
        "specified global or local variable, it returns negative one (-1).",
        "• If the last subscript in the subscripted global or",
        "local variable name is null or negative one (-1),",
        "$NEXT() returns the first node at the specified level.",
        "$Order()",
        "Returns the subscript of the next or prior local or",
        "global variable name in collation sequence within the",
        "array level specified by its first argument.",
        "In doing so, it moves in the direction specified by",
        "the second argument. In GT.M, when $ORDER() has an unsubscripted",
        "argument, it returns the next or previous unsubscripted",
        "local or global variable name in collating sequence.",
        "The format for the $ORDER function is:",
        "$O[RDER](glvn[,expr])",
        "• The subscripted global or local variable name specifies the node",
        "from which $ORDER() searches for the next or previous node that has",
        "data and/or descendants. The number of subscripts contained in the",
        "argument implicitly defines the array level.",
        "• The optional expression (second argument) specifies the direction",
        "for the $ORDER();1 specifies forward operation and -1 specifies reverse",
        "operation. Any other values for the expression will cause an error.",
        "• GT.M extends the M standard to allow unsubscripted names.",
        "In this case, $ORDER() returns the next or previous unsubscripted name.",
        "• If $ORDER() finds no node (or name) at the specified level",
        "after (or before) the specified global or local variable,",
        "it returns an empty string (\"\").",
        "Functions",
        "228",
        "• If the last subscript in the subscripted global or local",
        "variable name is null and the corresponding subscripted",
        "global or local variable has a matching null subscript, $ORDER()",
        "returns the next node after that with the null subscript at the",
        "specified level.",
        "If the last subscript in the subscripted global or local variable",
        "name is null and the corresponding subscripted global or local",
        "variable has no matching null subscript , $ORDER() returns first",
        "node at the specified level. If the last subscript in the:",
        "subscripted global or local variable name is null and second",
        "argument is -1, $ORDER() always returns the last node at the",
        "specified level regardless of the existence a null subscript",
        "at the specified level. However when a global or",
        "local variable level includes a null subscript and $ORDER(glvn,-1)",
        "returns an empty string result, users must test separately",
        "for the existence of the node with the null subscript.",
        "• $ORDER() can be used as a tool for retrieving data from",
        "M sparse arrays in an ordered fashion, independent of the order",
        "in which it was entered. In M, routines generally sort by",
        "SETting data into an array with appropriate subscripts and then",
        "retrieving the information with $ORDER().",
        "• $ORDER() returns subscripts, not data values, and does not",
        "discriminate between nodes that have data values and nodes",
        "that have descendants. Once $ORDER() provides the subscript,",
        "the routine must use the subscript to access the data value, if",
        "appropriate. Using $ORDER() maintains the naked reference",
        "indicator, even if $ORDER() returns a null.",
        "• GT.M optionally permits the use of null subscripts.",
        "This feature is enabled via the VIEW command for",
        "local variables and a REGION qualifier in GDE for",
        "global variables. When an application uses null",
        "subscripts, they are \"invisible\" in a $ORDER()",
        "loop so the application must test for them as a special case,",
        "perhaps using $DATA().",
        "• $Order() returns local array subscripts with values that are",
        "numeric, but non-canonical (over 18 digit), as strings.",
        "Note",
        "Name-level $ORDER() always returns an empty string when used",
        "with extended references. Examples of $ORDER()",
        "Example:",
        "GTM>zwrite",
        "lcl(1)=3",
        "lcl(\"x\")=4",
        "GTM>write $order(lcl(\"\"))",
        "1",
        "This example returns the first node, that is 1, because the",
        "specified last subscript of the argument is null and lcl has",
        "no null subscript.",
        "Example:",
        "GTM>write $order(lcl(1))",
        "x",
        "This example returns the first node after lcl(1) that is",
        "x because lcl has no null subscript. Example:",
        "GTM>write $order(lcl(\"\"),-1)",
        "x",
        "Functions",
        "229",
        "This example returns the last node that is, x,",
        "because the last subscript of the first argument is null",
        "and second argument is -1.",
        "GTM>set lcl(\"\")=2",
        "GTM>zwrite",
        "lcl(\"\")=2",
        "lcl(1)=3,",
        "lcl(\"x\")=4",
        "GTM>write $order(lcl(\"\"))",
        "1",
        "This example returns the second node at the specified level",
        "because the null subscript at the end of the argument is ambiguous",
        "(does it specify starting at the beginning or starting",
        "at the real node with the null subscript?) and returning",
        "the subscript of the first node (an empty string) would",
        "tend to create an endless loop.",
        "Example:",
        "GTM>write $order(lcl(\"\"),-1)",
        "x",
        "GTM>write $order(lcl(\"x\"),-1)",
        "1",
        "Example:",
        "GTM>kill set (a(1),a(2000),a(\"CAT\"),a(\"cat\"),a(\"ALF\"),a(12))=1",
        "GTM>set x=\"\" for set x=$order(a(x)) quit:x=\"\" write !,x",
        "1",
        "12",
        "2000",
        "ALF",
        "CAT",
        "cat",
        "GTM>kill a(\"CAT\") set a(5,10)=\"woolworths\",a(\"cat\")=\"last\"",
        "GTM>set x=\"\" for set x=$order(a(x),-1) quit:x=\"\" write !,x",
        "cat",
        "ALF",
        "2000",
        "12",
        "5",
        "1",
        "GTM>",
        "This example uses a $ORDER() loop to display all the subscripts",
        "at the first level of local variable a, make some changes in a,",
        "and then display all the subscripts in reverse order.",
        "Notice that $ORDER() returns only the existing subscripts",
        "in the sparse array and returns them in M collation sequence,",
        "regardless of the order in which they were entered.",
        "Also, $ORDER() does not differentiate between node A(5),",
        "which has only descendants (no data value), and the other nodes,",
        "which have data values.",
        "Example:",
        "GTM>kill set (%(1),tiva(2),A(3),tiv(4),Q(5),%a(6))=\"\"",
        "GTM>set x=\"%\"",
        "GTM>write:$data(@x) !,x for set x=$order(@x) quit:x=\"\" write !,x",
        "%",
        "%a",
        "A",
        "Q",
        "tiv",
        "Functions",
        "230",
        "tiva",
        "x",
        "GTM>set $piece(x,\"z\",32)=\"\"",
        "GTM>write:$data(@x) !,x for set x=$order(@x,-1) quit:x=\"\" write !,x",
        "x",
        "tiva",
        "tiv",
        "Q",
        "A",
        "%a",
        "%",
        "GTM>",
        "This example uses $ORDER() to display the current",
        "local variable names in both forward and reverse order.",
        "Notice that the first ([^]%) and last ([^]zzzzzzzz) names",
        "require handling as special cases and require a $DATA() function.",
        "Example:",
        "set acct=\"\",cntt=\"\"",
        "for fet acct=$order(^acct(acct)) quit:acct=\"\" do",
        ". for set cntt=$order(^acct(acct,cntt)) do WORK",
        "quit",
        "This uses two nested $ORDER() loops to cycle through",
        "the ^acct global array and perform some action for each",
        "second level node.",
        "$Piece()",
        "Returns a substring delimited by a specified string delimiter",
        "made up of one or more characters. In M, $PIECE() returns",
        "a logical field from a logical record.",
        "The format for the $PIECE function is:",
        "$P[IECE](expr1,expr2[,intexpr1[,intexpr2]])",
        "• The first expression specifies the string from",
        "which $PIECE() computes its result.",
        "• The second expression specifies the delimiting",
        "string that determines the piece \"boundaries\";",
        "if this argument is an empty string, $PIECE()",
        "returns an empty string.",
        "• If the second expression does not appear.",
        "anywhere in the first expression, $PIECE() returns",
        "the entire first expression (unless forced to return",
        "an empty string by the second integer expression).",
        "• The optional first integer expression (third argument)",
        "specifies the beginning piece to return; if this argument",
        "is missing,$PIECE() returns the first piece.",
        "• The optional second integer expression (fourth argument)",
        "specifies the last piece to return. If this argument is missing,",
        "$PIECE() returns only one piece unless the first integer expression",
        "is zero (0) or negative, in which case it returns a null",
        "string. If this argument is less than the first integer",
        "expression, $PIECE() returns an empty string.",
        "• If the second integer expression exceeds the actual number of pieces",
        "in the first expression, $PIECE() returns all of the",
        "expression after the delimiter selected by the first integer expression.",
        "• The $PIECE() result never includes the \"outside\" delimiters;",
        "however, when the second integer argument specifies multiple",
        "pieces, the result contains the \"inside\" occurrences of the delimiter.",
        "Functions",
        "231",
        "• $PIECE() can also be used as tool for efficiently using values that",
        "contain multiple elements or fields, each of which may be",
        "variable in length.",
        "• Applications typically use a single character for a $PIECE()",
        "delimiter (second argument) to minimize storage overhead,",
        "and increase efficiency at run-time. The delimiter must be",
        "chosen so the data values never contain the delimiter. Failure",
        "to enforce this convention with edit checks may result in",
        "unanticipated changes in the position of pieces within the data",
        "value. The caret symbol (^), backward slash (\\), and asterisk (*)",
        "characters are examples of popular visible delimiters. Multiple",
        "character delimiters may reduce the likelihood of conflict with",
        "field contents. However, they decrease storage efficiency, and",
        "are processed with less efficiency than single character",
        "delimiters. Some applications use control characters, which reduce",
        "the chances of the delimiter appearing in the data but sacrifice the",
        "readability provided by visible delimiters.",
        "• A SET command argument can have something that has the format of",
        "a $PIECE() on the left-hand side of its equal sign",
        "(=). This construct permits easy maintenance of individual pieces",
        "within a string. It also can be used to generate a string of",
        "delimiters. For more information on SET $PIECE(), refer to \"Set\" (page 143)."
    ]
}